------------------------------------------------------------
-- Ramentools - some quality-of-life improvements for ipe --
------------------------------------------------------------
-- Duplicate at mouse & keep layers-tool with Ctrl+D
-- Shift or Ctrl to create stamps
------------------------------------------------------------

-- Place this file in Ipe’s configuration folder
-- (you’ll find the exact location listed on the ipelet path (check Show configuration again).

-- On MacOS, it is ~/.ipe/ipelets/, 
-- on Windows, the file must be placed in the program folder, there already exists a sub-folder named ipelets. 





--label = "Silent actions"
--about = "Reduce some warnings when deleting layers etc."

-- Helper function: Switch active layer in all views from 'layer' to a free (unlocked) layer
local function switchActiveLayerInViews(page, layer)
  local layers = page:layers()
  local freeLayer = nil
  for _, l in ipairs(layers) do
    if l ~= layer and not page:isLocked(l) then
      freeLayer = l
      break
    end
  end
  if not freeLayer then return end
  for v = 1, page:countViews() do
    if page:active(v) == layer then
      page:setActive(v, freeLayer)
    end
  end
end

-- Adapted layeraction_delete
function MODEL:layeraction_delete(layer)
  local p = self:page()
  switchActiveLayerInViews(p, layer)
  local t = { label="delete layer " .. layer,
          pno=self.pno,
          vno=self.vno,
          original=p:clone(),
          layer=layer,
          undo=revertOriginal
        }
  t.redo = function (t, doc)
    local p = doc[t.pno]
    switchActiveLayerInViews(p, t.layer)
    for i = #p,1,-1 do
      if p:layerOf(i) == t.layer then
        p:remove(i)
      end
    end
    p:removeLayer(t.layer)
  end
  self:register(t)
end

-- Adapted layeraction_lock
function MODEL:layeraction_lock(layer, arg)
  local p = self:page()
  if arg then
    switchActiveLayerInViews(p, layer)
  end
  local t = { label="set locking of layer " .. layer,
          pno=self.pno,
          vno=self.vno,
          layer=layer,
          original=p:isLocked(layer),
          locked=arg,
        }
  t.undo = function (t, doc)
    local p = doc[t.pno]
    if t.locked then
      switchActiveLayerInViews(p, t.layer)
    end
    p:setLocked(t.layer, t.original)
  end
  t.redo = function (t, doc)
    local p = doc[t.pno]
    if t.locked then
      switchActiveLayerInViews(p, t.layer)
    end
    p:setLocked(t.layer, t.locked)
  end
  self:register(t)
  self:deselectNotInView()
  self:setPage()
end